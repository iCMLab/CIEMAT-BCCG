snp$flag <- sample(c(TRUE, FALSE), nrow(snp), replace=TRUE)
pData(tmp) <- snp
meta <- getMetadata(tmp)
meta["flag", "labelDescription"] <- "flag"
varMetadata(tmp) <- meta
getVariableNames(tmp)
varLabels(tmp)[4] <- "FLAG"
rm(tmp)
###################################################
### code chunk number 4: DataCleaning.Rnw:229-256
###################################################
# Load the scan annotation (simple data frame)
data(illumina_scan_annot)
# Create a ScanAnnotationDataFrame
scanAnnot <- ScanAnnotationDataFrame(illumina_scan_annot)
# names of columns
varLabels(scanAnnot)
# data
head(pData(scanAnnot))
# Add metadata to describe the columns
meta <- varMetadata(scanAnnot)
meta[c("scanID", "subjectID", "family", "father", "mother",
"CoriellID", "race", "sex", "status", "genoRunID", "plate",
"batch", "file"), "labelDescription"] <-
c("unique ID for scans",
"subject identifier (may have multiple scans)",
"family identifier",
"father identifier as subjectID",
"mother identifier as subjectID",
"Coriell subject identifier",
"HapMap population group",
"sex coded as M=male and F=female",
"simulated case/control status" ,
"genotyping instance identifier",
"plate containing samples processed together for genotyping chemistry",
"simulated genotyping batch",
"raw data file")
varMetadata(scanAnnot) <- meta
###################################################
### code chunk number 5: DataCleaning.Rnw:263-268
###################################################
scanID <- scanAnnot$scanID
scanID <- getScanID(scanAnnot)
sex <- scanAnnot[["sex"]]
sex <- getSex(scanAnnot)
subjectID <- getVariable(scanAnnot, "subjectID")
###################################################
### code chunk number 6: DataCleaning.Rnw:336-384
###################################################
# Define a path to the raw data files
path <- system.file("extdata", "illumina_raw_data", package="GWASdata")
geno.file <- "tmp.geno.gds"
# first 3 samples only
scan.annotation <- illumina_scan_annot[1:3, c("scanID", "genoRunID", "file")]
names(scan.annotation)[2] <- "scanName"
snp.annotation <- illumina_snp_annot[,c("snpID", "rsID", "chromosome", "position")]
# indicate which column of SNP annotation is referenced in data files
names(snp.annotation)[2] <-  "snpName"
col.nums <- as.integer(c(1,2,12,13))
names(col.nums) <- c("snp", "sample", "a1", "a2")
diag.geno.file <- "diag.geno.RData"
diag.geno <- createDataFile(path = path,
filename = geno.file,
file.type = "gds",
variables = "genotype",
snp.annotation = snp.annotation,
scan.annotation = scan.annotation,
sep.type = ",",
skip.num = 11,
col.total = 21,
col.nums = col.nums,
scan.name.in.file = 1,
diagnostics.filename = diag.geno.file,
verbose = FALSE)
# Look at the values included in the "diag.geno" object which holds
#   all output from the function call
names(diag.geno)
# `read.file' is a vector indicating whether (1) or not (0) each file
#   specified in the `files' argument was read successfully
table(diag.geno$read.file)
# `row.num' is a vector of the number of rows read from each file
table(diag.geno$row.num)
# `sample.match' is a vector indicating whether (1) or not (0)
#   the sample name inside the raw text file matches that in the
#   sample annotation data.frame
table(diag.geno$sample.match)
# `snp.chk' is a vector indicating whether (1) or not (0)
#   the raw text file has the expected set of SNP names
table(diag.geno$snp.chk)
# `chk' is a vector indicating whether (1) or not (0) all previous
#   checks were successful and the data were written to the data file
table(diag.geno$chk)
###################################################
### code chunk number 7: DataCleaning.Rnw:390-411
###################################################
check.geno.file <- "check.geno.RData"
check.geno <- checkGenotypeFile(path = path,
filename = geno.file,
file.type = "gds",
snp.annotation = snp.annotation,
scan.annotation = scan.annotation,
sep.type = ",",
skip.num = 11,
col.total = 21,
col.nums = col.nums,
scan.name.in.file = 1,
check.scan.index = 1:3,
n.scans.loaded = 3,
diagnostics.filename = check.geno.file,
verbose = FALSE)
# Look at the values included in the "check.geno" object which holds
#   all output from the function call
names(check.geno)
# 'geno.chk' is a vector indicating whether (1) or not (0) the genotypes
#   match the text file
table(check.geno$geno.chk)
###################################################
### code chunk number 8: DataCleaning.Rnw:421-431
###################################################
(gds <- GdsGenotypeReader(geno.file))
nscan(gds)
nsnp(gds)
head(getScanID(gds))
head(getSnpID(gds))
head(getChromosome(gds))
head(getPosition(gds))
# genotypes for the first 3 samples and  the first 5 SNPs
getGenotype(gds, snp=c(1,5), scan=c(1,3))
close(gds)
###################################################
### code chunk number 9: DataCleaning.Rnw:459-478
###################################################
qxy.file <- "tmp.qxy.gds"
col.nums <- as.integer(c(1,2,5,16,17))
names(col.nums) <- c("snp", "sample", "quality", "X", "Y")
diag.qxy.file <- "diag.qxy.RData"
diag.qxy <- createDataFile(path = path,
filename = qxy.file,
file.type = "gds",
variables = c("quality","X","Y"),
snp.annotation = snp.annotation,
scan.annotation = scan.annotation,
sep.type = ",",
skip.num = 11,
col.total = 21,
col.nums = col.nums,
scan.name.in.file = 1,
diagnostics.filename = diag.qxy.file,
verbose = FALSE)
###################################################
### code chunk number 10: DataCleaning.Rnw:484-499
###################################################
check.qxy.file <- "check.qxy.RData"
check.qxy <- checkIntensityFile(path = path,
filename = qxy.file,
file.type = "gds",
snp.annotation = snp.annotation,
scan.annotation = scan.annotation,
sep.type = ",",
skip.num = 11,
col.total = 21,
col.nums = col.nums,
scan.name.in.file = 1,
check.scan.index = 1:3,
n.scans.loaded = 3,
diagnostics.filename = check.qxy.file,
verbose = FALSE)
###################################################
### code chunk number 11: DataCleaning.Rnw:508-522
###################################################
(gds <- GdsIntensityReader(qxy.file))
nscan(gds)
nsnp(gds)
head(getScanID(gds))
head(getSnpID(gds))
head(getChromosome(gds))
head(getPosition(gds))
# quality score for the first 3 samples and  the first 5 SNPs
getQuality(gds, snp=c(1,5), scan=c(1,3))
# X intensity for the first 3 samples and  the first 5 SNPs
getX(gds, snp=c(1,5), scan=c(1,3))
# Y intensity for the first 3 samples and  the first 5 SNPs
getY(gds, snp=c(1,5), scan=c(1,3))
close(gds)
###################################################
### code chunk number 12: DataCleaning.Rnw:595-614
###################################################
bl.file <- "tmp.bl.gds"
col.nums <- as.integer(c(1,2,20,21))
names(col.nums) <- c("snp", "sample", "BAlleleFreq", "LogRRatio")
diag.bl.file <- "diag.bl.RData"
diag.bl <- createDataFile(path = path,
filename = bl.file,
file.type = "gds",
variables = c("BAlleleFreq","LogRRatio"),
snp.annotation = snp.annotation,
scan.annotation = scan.annotation,
sep.type = ",",
skip.num = 11,
col.total = 21,
col.nums = col.nums,
scan.name.in.file = 1,
diagnostics.filename = diag.bl.file,
verbose = FALSE)
###################################################
### code chunk number 13: DataCleaning.Rnw:621-625
###################################################
(gds <- GdsIntensityReader(bl.file))
getBAlleleFreq(gds, snp=c(1,5), scan=c(1,3))
getLogRRatio(gds, snp=c(1,5), scan=c(1,3))
close(gds)
###################################################
### code chunk number 14: DataCleaning.Rnw:629-632
###################################################
file.remove(geno.file, qxy.file, bl.file)
file.remove(diag.geno.file, diag.qxy.file, diag.bl.file)
file.remove(check.geno.file, check.qxy.file)
###################################################
### code chunk number 15: DataCleaning.Rnw:648-657
###################################################
genofile <- system.file("extdata", "illumina_geno.gds", package="GWASdata")
gds <- GdsGenotypeReader(genofile)
# only GDS file
genoData <- GenotypeData(gds)
###################################################
### code chunk number 13: DataCleaning.Rnw:621-625
###################################################
(gds <- GdsIntensityReader(bl.file))
###################################################
### code chunk number 12: DataCleaning.Rnw:595-614
###################################################
bl.file <- "tmp.bl.gds"
col.nums <- as.integer(c(1,2,20,21))
names(col.nums) <- c("snp", "sample", "BAlleleFreq", "LogRRatio")
diag.bl.file <- "diag.bl.RData"
diag.bl <- createDataFile(path = path,
filename = bl.file,
file.type = "gds",
variables = c("BAlleleFreq","LogRRatio"),
snp.annotation = snp.annotation,
scan.annotation = scan.annotation,
sep.type = ",",
skip.num = 11,
col.total = 21,
col.nums = col.nums,
scan.name.in.file = 1,
diagnostics.filename = diag.bl.file,
verbose = FALSE)
###################################################
### code chunk number 13: DataCleaning.Rnw:621-625
###################################################
(gds <- GdsIntensityReader(bl.file))
getBAlleleFreq(gds, snp=c(1,5), scan=c(1,3))
getLogRRatio(gds, snp=c(1,5), scan=c(1,3))
close(gds)
###################################################
### code chunk number 15: DataCleaning.Rnw:648-657
###################################################
genofile <- system.file("extdata", "illumina_geno.gds", package="GWASdata")
gds <- GdsGenotypeReader(genofile)
###################################################
### code chunk number 15: DataCleaning.Rnw:648-657
###################################################
gds <- GdsGenotypeReader(genofile)
# only GDS file
genoData <- GenotypeData(gds)
# with scan annotation
genoData <- GenotypeData(gds, scanAnnot=scanAnnot)
# with scan and SNP annotation
genoData <- GenotypeData(gds, snpAnnot=snpAnnot, scanAnnot=scanAnnot)
genoData
###################################################
### code chunk number 16: DataCleaning.Rnw:664-683
###################################################
nsnp(genoData)
nscan(genoData)
# scan annotation
range(getScanID(genoData))
hasSex(genoData)
table(getSex(genoData))
hasScanVariable(genoData, "subjectID")
head(getScanVariable(genoData, "subjectID"))
getScanVariableNames(genoData)
# snp annotation
range(getSnpID(genoData))
table(getChromosome(genoData, char=TRUE))
head(getPosition(genoData))
hasSnpVariable(genoData, "rsID")
head(getSnpVariable(genoData, "rsID"))
getSnpVariableNames(genoData)
# genotypes
getGenotype(genoData, snp=c(1,5), scan=c(1,5))
close(genoData)
###################################################
### code chunk number 17: DataCleaning.Rnw:690-707
###################################################
# quality score, X and X intensity
qxyfile <- system.file("extdata", "illumina_qxy.gds", package="GWASdata")
gds <- GdsIntensityReader(qxyfile)
qxyData <- IntensityData(gds, snpAnnot=snpAnnot, scanAnnot=scanAnnot)
qxyData
getQuality(qxyData, snp=c(1,5), scan=c(1,5))
getX(qxyData, snp=c(1,5), scan=c(1,5))
getY(qxyData, snp=c(1,5), scan=c(1,5))
close(qxyData)
# BAF/LRR
blfile <- system.file("extdata", "illumina_bl.gds", package="GWASdata")
gds <- GdsIntensityReader(blfile)
blData <- IntensityData(gds, snpAnnot=snpAnnot, scanAnnot=scanAnnot)
blData
getBAlleleFreq(blData, snp=c(1,5), scan=c(1,5))
getLogRRatio(blData, snp=c(1,5), scan=c(1,5))
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="./")
dev.off()
datpop <- factor(pop_code)[match(pca$sample.id, tab$sample.id)]
parcoord(pca$eigenvect[,1:100], col=datpop)
dev.off()
datpop <- factor(pop_code)[match(pca$sample.id, tab$sample.id)]
parcoord(pca$eigenvect[,1:2], col=datpop)
dev.off()
datpop <- factor(pop_code)[match(pca$sample.id, tab$sample.id)]
parcoord(pca$eigenvect[,1:30], col=datpop)
library(qqplotr)
library(qqman)
## ------------------------------------------------------------------------
str(gwasResults)
head(gwasResults)
tail(gwasResults)
## ------------------------------------------------------------------------
as.data.frame(table(gwasResults$CHR))
## ------------------------------------------------------------------------
manhattan(gwasResults)
## ------------------------------------------------------------------------
manhattan(gwasResults, main="Manhattan Plot", ylim=c(0,10), cex=0.6, cex.axis=0.9, col=c("blue4", "orange3"), suggestiveline=F, genomewideline=F, chrlabs=c(1:20, "P", "Q"))
## ------------------------------------------------------------------------
manhattan(subset(gwasResults, CHR==1))
## ------------------------------------------------------------------------
str(snpsOfInterest)
manhattan(gwasResults, highlight=snpsOfInterest)
## ------------------------------------------------------------------------
manhattan(subset(gwasResults, CHR==3), highlight=snpsOfInterest, xlim=c(200, 500), main="Chr 3")
## ------------------------------------------------------------------------
manhattan(gwasResults, annotatePval=0.01)
## ------------------------------------------------------------------------
manhattan(gwasResults, annotatePval=0.005, annotateTop=FALSE)
## ------------------------------------------------------------------------
# Add test statistics
gwasResults <- transform(gwasResults, zscore=qnorm(P/2, lower.tail=FALSE))
head(gwasResults)
# Make the new plot
manhattan(gwasResults, p="zscore", logp=FALSE, ylab="Z-score", genomewideline=FALSE, suggestiveline=FALSE, main="Manhattan plot of Z-scores")
## ------------------------------------------------------------------------
qq(gwasResults$P)
## ------------------------------------------------------------------------
qq(gwasResults$P, main="Q-Q plot of GWAS p-values",
xlim=c(0,7), ylim=c(0,12), pch=18, col="blue4", cex=1.5, las=1)
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="./")
fviz_pca_biplot(pca,
# Individuals
geom.ind = "point",
fill.ind = pop_code, col.ind = "black",
pointshape = 21, pointsize = 2,
palette = "jco",
addEllipses = TRUE,
# Variables
alpha.var ="contrib", col.var = "contrib",
gradient.cols = "RdYlBu",
legend.title = list(fill = "sample.id", color = "Contrib",
alpha = "Contrib")
)
library("FactoMineR")
library("factoextra")
fviz_pca_biplot(pca,
# Individuals
geom.ind = "point",
fill.ind = pop_code, col.ind = "black",
pointshape = 21, pointsize = 2,
palette = "jco",
addEllipses = TRUE,
# Variables
alpha.var ="contrib", col.var = "contrib",
gradient.cols = "RdYlBu",
legend.title = list(fill = "sample.id", color = "Contrib",
alpha = "Contrib")
)
install.packages("factoextra")
library("FactoMineR")
library("factoextra")
fviz_pca_biplot(pca,
# Individuals
geom.ind = "point",
fill.ind = pop_code, col.ind = "black",
pointshape = 21, pointsize = 2,
palette = "jco",
addEllipses = TRUE,
# Variables
alpha.var ="contrib", col.var = "contrib",
gradient.cols = "RdYlBu",
legend.title = list(fill = "sample.id", color = "Contrib",
alpha = "Contrib")
)
# Set working directory, nos metemos en la carpeta donde tenemos los objetos que os hemos pasado
setwd("C:/Users/Usuario/Downloads/zarrei//")
# Si estamos en la carpeta que toca, deberíamos ver los siguientes archivos:
list.files()
# Cargamos las librerías
library( gdata )
library( GenomicRanges )
library( biomaRt )  #Bioconductor
# Especificamos que queremos la página 3, dónde hay ganancias y pérdidas
CNV_Zarrei <- read.xls ( "Stringent_map.xls", sheet = 3, header = TRUE )
a <- load("CNV_Zarrei.RData")
# Les damos nombres a las CNVs (junto "Z" de Zarrei, cromosoma, y coordenadas)
rownames( CNV_Zarrei ) <- paste( "Z", CNV_Zarrei$chr, CNV_Zarrei$start, CNV_Zarrei$end, sep = "_" )
CNV_Zarrei$chr <- as.factor(substr(CNV_Zarrei$chr, 4, nchar(as.character(CNV_Zarrei$chr))))
CNV_Zarrei$chr <- ordered (CNV_Zarrei$chr, levels = c(1:22, "X", "Y"))
### PREGUNTAS:
# * ¿Cuántas CNVs hay de cada tipo?
summary( CNV_Zarrei$type)
# * ¿Y separando por cromosomas?
table( CNV_Zarrei [ , c("chr", "type")])
# Otras maneras que os enseñaron en clase para hacer lo mismo
xtabs ( ~ chr + type, data = CNV_Zarrei)
# CREAMOS UN OBJETO GRanges
Zarrei_RANGES <- GRanges( seqnames = CNV_Zarrei$chr,
ranges = IRanges( start = CNV_Zarrei$start,
end = CNV_Zarrei$end,
names = rownames(CNV_Zarrei) ),
type = CNV_Zarrei$type)
summary(width(Zarrei_RANGES)) # Los tamaños de las CNVs están en bp
# Histograma del tamaño de las CNVs
hist(width(Zarrei_RANGES))
# Lo veremos mejor calculando el logaritmo del tamaño de las CNVs
hist(log10(width(Zarrei_RANGES)))
# Hacemos un boxplot separando los tamaños de las CNVs por cromosomas
lista <- by(log10(width(Zarrei_RANGES)), as.factor(seqnames(Zarrei_RANGES)), list)
str(lista)
boxplot(lista, outline = F, las = 2, varwidth= T ,
main = "CNV size by chromosome",
ylab = "log10 CNV size")
# Abrimos la tabla creada con BioMart
GRCh37_protein_coding <- read.table( "BioMart_protein_coding_75.txt", sep = "\t", header = TRUE, stringsAsFactors = F )
# En caso de no haberla podido crear, cargar la siguiente tabla
a <- load( "GRCh37_protein_coding.RData")
# Cambiamos los nombres
colnames( GRCh37_protein_coding ) <- c( "Gene.ID", "Chromosome", "Start", "End")
# Damos nombre a las filas
rownames( GRCh37_protein_coding ) <-GRCh37_protein_coding$Gene.ID
# CREAMOS UN OBJETO GRanges
protein_coding_RANGES <- GRanges( seqnames = GRCh37_protein_coding$Chromosome ,
ranges = IRanges( start = GRCh37_protein_coding$Start,
end = GRCh37_protein_coding$End,
names = rownames( GRCh37_protein_coding ) ) )
listMarts(host = "feb2014.archive.ensembl.org")
ensembl=useMart(biomart="ENSEMBL_MART_ENSEMBL", host = "feb2014.archive.ensembl.org")
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
listFilters(ensembl)
listAttributes(ensembl)
filterOptions("biotype",ensembl)
genes.with.id = getBM(attributes=c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"),
filters = c("chromosome_name", "biotype" ),
values = list(c(1:22), "protein_coding"),
mart= ensembl) # fuction to get  gene id's and gene name from data base
colnames(genes.with.id)
colnames(genes.with.id) <- colnames(GRCh37_protein_coding)
rownames(genes.with.id) <- genes.with.id$Gene.ID
# comprobamos que son idénticos
identical(GRCh37_protein_coding, genes.with.id)
overlaps <- findOverlaps(query = protein_coding_RANGES, subject = Zarrei_RANGES, type = "within" )
#Los genes que se encuentran dentro de CNVs los podemos obtener de la siguiente manera:
length(unique(queryHits(overlaps) ))
# Y las CNVs que están englobando estos genes las obtenemos con
subjectHits(overlaps)
# Vamos a crear vectores con los genes y las cnvs que solapan
prueba_cnvs_with_genes <- names(Zarrei_RANGES) [  subjectHits(overlaps)  ]
prueba_genes_within_cnvs <- names(protein_coding_RANGES) [  queryHits(overlaps)  ]
# Añado un unique()
cnvs_with_genes <- names(Zarrei_RANGES) [ unique( subjectHits(overlaps) ) ]
genes_within_cnvs <- names(protein_coding_RANGES) [ unique( queryHits(overlaps) ) ]
objetos <- load( "ESSENTIAL_GENES.RData")
# visualizo qué objetos he cargado
objetos
# ¿Cuántos genes CNV son esenciales?
sum(genes_within_cnvs %in% ESSENTIAL_GENES)
# Creamos una tabla de contingencia
CNV_ESSENTIAL <- table(data.frame(CNV =names(protein_coding_RANGES) %in% genes_within_cnvs,
ESSENTIAL = names(protein_coding_RANGES) %in% ESSENTIAL_GENES))
CNV_ESSENTIAL
# Estas proporciones son diferentes de lo que esperaríamos por azar?
fisher.test(CNV_ESSENTIAL)
load("OMIM_genes.RData")
CNV_OMIM <- table(data.frame(CNV =names(protein_coding_RANGES) %in% genes_within_cnvs, OMIM = names(protein_coding_RANGES) %in% OMIM_genes))
fisher.test(CNV_OMIM)
library("FactoMineR")
library("factoextra")
fviz_pca_biplot(pca,
# Individuals
geom.ind = "point",
fill.ind = pop_code, col.ind = "black",
pointshape = 21, pointsize = 2,
palette = "jco",
addEllipses = TRUE,
# Variables
alpha.var ="contrib", col.var = "contrib",
gradient.cols = "RdYlBu",
legend.title = list(fill = "sample.id", color = "Contrib",
alpha = "Contrib")
)
